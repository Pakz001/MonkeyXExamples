'
' added world map and initial movement
' Added shop class (wip)
' Need to kill all monsters before level change
' added animated slime monsters gfx
' added sword/axe/healthsmall and ..medium icons.


Import mojo

'items
'gold,healthsmall,healthmedium,chest,sword,axe

Global mapwidth:Int=50
Global mapheight:Int=50
Global sw:Int=640
Global sh:Int=480
Global tw:Int
Global th:Int
Global itemname:String[]=["gold","healthsmall","healthmedium","chest","sword","axe"]
Global monstername:String[]=["bat","rat","goblin"]
Global firstitemfound:Bool=False


Class worldmap
	Field sw:Int,sh:Int
	Field tw:Float,th:Float
	Field mw:Int,mh:Int
	Field map:Int[][]
	Field grassmap:Int[][]
	Field bridgemap:Int[][]
	Field tileroad:Int=999
	Field numzones:Int
	' 
	Field px:Int
	Field py:Int	
	'
	' Control movement thingy
	Field tx:Int,ty:Int,controldelay:Int
	Field tleft:Bool,tright:Bool,tup:Bool,tdown:Bool
	Field tleftx:Int=20
	Field tlefty:Int=480-100
	Field trightx:Int=120
	Field trighty:Int=480-100
	Field tupx:Int=70
	Field tupy:Int=480-150
	Field tdownx:Int=70
	Field tdowny:Int=480-50

	Method New(sw:Int,sh:Int,mw:Int,mh:Int,numzones:Int)
		Self.numzones = numzones
		Self.sw = sw
		Self.sh = sh
		Self.mw = mw
		Self.mh = mh
		Self.tw = Float(sw) / Float(mw)
		Self.th = Float(sh) / Float(mh)		
		map = New Int[mw][]
		grassmap = New Int[mw][]		
		bridgemap = New Int[mw][]
		For Local i:Int=0 Until mw
			map[i] = New Int[mh]
			grassmap[i] = New Int[mh]
			bridgemap[i] = New Int[mh]			
		Next
		createmap()
		placeplayer()
	End Method
	Method placeplayer()
		While grassmap[px][py] <> 1
			px = Rnd(mw)
			py = Rnd(mh)
		Wend
	End Method
	'
	' Update the player on the world map.... (px/py)
	Method update()
		controldelay+=1
		If controldelay<10 Then Return
		'touch mouse input
		If MouseDown(MOUSE_LEFT) Or TouchDown
			Local x:Int
			Local y:Int
			Local w:Int=100
			Local h:Int=50
			x = tupx
			y = tupy
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tup=True
			x = tdownx
			y = tdowny
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tdown=True
			x = tleftx
			y = tlefty
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tleft=True
			x = trightx
			y = trighty
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tright=True
		End If
		Local ox:Int=px,oy:Int=py
		'keyinput
		If KeyDown(KEY_UP) Or tup
			If py-1 >= 0 
				If grassmap[px][py-1] = 1 Then py-=1
				controldelay = 0
			End If
		End If
		If KeyDown(KEY_DOWN) Or tdown
			If py+1 < mh
				If grassmap[px][py+1] = 1 Then py+=1
				controldelay = 0
			End If
		End If
		If KeyDown(KEY_RIGHT) Or tright
			If px+1 < mw
				If grassmap[px+1][py] = 1 Then px+=1
				controldelay = 0
			End If
		End If
		If KeyDown(KEY_LEFT) Or tleft
			If px-1 >=0 
				If grassmap[px-1][py] = 1 Then px-=1
				controldelay = 0
			End If
		End If

		tup=False
		tright=False
		tdown=False
		tleft=False
		
	End Method
	Method createmap()
		'Create a number of zones (area's)
		For Local zone:Int=0 Until numzones
			map[Rnd(mw)][Rnd(mh)] = zone+1
		Next
		'Grow the zones
		Local cangrow:Bool=True
		Local mx:Int[]=[-1,0,1,0]
		Local my:Int[]=[-1,0,0,1]
		While cangrow=True
			Local x:Int=Rnd(mw)
			Local y:Int=Rnd(mh)
			If map[x][y] > 0
				Local tile:Int=map[x][y]
				For Local i:Int=0 Until mx.Length
					Local x2:Int=mx[i]+x
					Local y2:Int=my[i]+y
					If x2<0 Or y2<0 Or x2>=mw Or y2>=mh Then Continue
					If Rnd(10)<2 And map[x2][y2] = 0
						map[x2][y2] = tile
					End If
				Next
			End If
			' Every now and then check if every spot is taken
			If Rnd(mw)<mw/10
				cangrow = False
				For Local y2:Int=0 Until mh
				For Local x2:Int=0 Until mw
					If map[x2][y2] = 0 Then cangrow = True;Exit
				Next
				Next
			End If			
		Wend
		' Create the roads
		For Local y:Int=0 Until mh
		For Local x:Int=0 Until mw
			Local t:Int=map[x][y]
			If x+1 < mw And map[x+1][y] <> t And grassmap[x+1][y] = 0 Then grassmap[x][y] = 1
			If y+1 < mh And map[x][y+1] <> t And grassmap[x][y+1] = 0 Then grassmap[x][y] = 1
			If x+1 < mw And y+1 < mh And map[x+1][y+1] <> t And grassmap[x+1][y+1] = 0 Then grassmap[x][y] = 1
		Next
		Next
		'create the bridges
		For Local y:Int=0 Until mh
		For Local x:Int=0 Until mw
			If grassmap[x][y] <> 1 Then Continue
			Local cnt:Int=0
			For Local y2:Int=y-1 To y+1
			For Local x2:Int=x-1 To x+1
				If x2<0 Or y2<0 Or x2>=mw Or y2>=mh Then Continue
				If map[x2][y2] >= numzones/3 Then cnt+=1
			Next
			Next
			If cnt=0 Then bridgemap[x][y] = 1
		Next
		Next
	End Method
	Method drawplayer()
		SetColor 0,0,0
		DrawRect (px*tw),(py*th),tw,th

		SetColor 255,255,255
		DrawRect (px*tw)+1,(py*th)+1,tw-2,th-2
	End Method
	Method draw()
		
		' map pass 1		
		For Local y:Int=0 Until mh
		For Local x:Int=0 Until mw
			If map[x][y] = 0 Then Continue			
			Local x2:Int = x*tw
			Local y2:Int = y*th
			If map[x][y] < numzones/3 Or map[x][y] = 1 Then
			' water
			SetColor 44,140,200
			DrawRect x2,y2,tw+1,th+1
			SetColor 46,165,225
			DrawOval x2+tw/3,y2+th/5,tw/4,th/2
			SetColor 56,195,255
			DrawOval x2+tw/3,y2+th/4,tw/5,th/7

			Else
			If map[x][y] > numzones/3 And map[x][y] < numzones/1.5
				'grass
				SetColor 160,200,105
				DrawRect x2,y2,tw+1,th+1
				'treebase dark
				SetColor 10,45,0
				DrawOval x2+tw/3,y2+th/2,tw/2,th/1.5
	
				'treebase light
				SetColor 200,55,0
				DrawOval x2+tw/2.2,y2+th/2,tw/4,th/1.5
				' tree top dark			
				SetColor 0,55,0
				DrawOval x2+tw/8,y2+th/10,tw/1.1,th/1.3
				' tree top 
				SetColor 0,190,0
				DrawOval x2+tw/8+1,y2+th/10,tw/1.2-2,th/1.3
				
	
				' highlight top 
				SetColor 200,255,200
				DrawOval x2+tw/4+1,y2+th/5,tw/3,th/3
			Else 'mountains
					'background
					SetColor 70,200,20
					DrawRect x2,y2,tw+1,th+1
					'mountain base				 
					Local pol:Float[20]
					Local an:Int=180
					Local cnt:Int=0
					For Local i:Int=0 Until 10
						pol[cnt]=x2+tw/2+(Cos(an)*tw/2)
						pol[cnt+1]=y2+th+(Sin(an)*th)
						an+=180/9
						cnt+=2
					Next
					SetColor 220,120,10
					DrawPoly(pol)
					'mountain base dark
					an=180
					cnt=0
					For Local i:Int=0 Until 10
						pol[cnt]=x2+tw/2+(Cos(an)*tw/2)
						pol[cnt+1]=y2+th+(Sin(an)*th/2)
						an+=180/9
						cnt+=2
					Next
					SetColor 100,50,10
					DrawPoly(pol)

					'mountain top				
					SetColor 250,250,100
					DrawOval x2+tw/2-3,y2,5,5
			End If		
			End If

		Next
		Next
		'grass
		For Local y:Int=0 Until mh
		For Local x:Int=0 Until mw
			If grassmap[x][y] = 0 Then Continue			
			Local x2:Int = x*tw
			Local y2:Int = y*th
			SetColor 80,230,20
			DrawRect x2,y2,tw+1,th+1
		Next
		Next

		'bridges
		For Local y:Int=0 Until mh
		For Local x:Int=0 Until mw
			If bridgemap[x][y] = 0 Then Continue			
			Local x2:Int = x*tw
			Local y2:Int = y*th
			SetColor 150,120,15
			DrawRect x2,y2,tw+1,th+1
			'plank
			SetColor 200,170,20
			DrawRect x2+tw/10,y2,tw/3,th+1
			DrawRect x2+tw/1.8,y2,tw/3,th+1
			'plank shadow and light
			SetColor 240,200,200
			DrawRect x2+tw/10,y2,1,th+1
			DrawRect x2+tw/1.8,y2,1,th+1
			SetColor 0,0,0
			DrawRect x2+tw/10+tw/3,y2,1,th+1
			DrawRect x2+tw/1.8+tw/3,y2,1,th+1
		Next
		Next


		' map pass 2 (shadow under trees/grass and highlight up water)		
		For Local y:Int=1 Until mh
		For Local x:Int=0 Until mw
			If map[x][y] = 0 Then Continue			
			Local x2:Int = x*tw
			Local y2:Int = y*th
			'shadow under trees
			If grassmap[x][y] = 1 And grassmap[x][y-1] = 0 And map[x][y] > numzones/3
			SetColor 40,160,30
			DrawRect x2+tw/4,y2,tw-th/2,th/3
			End If
			'shadow under water
			If grassmap[x][y] = 0 And grassmap[x][y-1] = 1 And map[x][y] < numzones/3
			SetColor 0,0,0
			DrawRect x2,y2,tw+1,th/8
			End If
		Next
		Next

		'
		' Draw the movement thingy\
		'
		'SetColor 255,255,255
		'DrawRect tx*tw+mymap.shakex,ty*th+mymap.shakey,tw,th
		SetColor 255,255,0
		DrawRect tleftx,tlefty,100,50
		SetColor 255,255,255
		DrawText "Left",tleftx+50,tlefty+25,0.5,0.5
		SetColor 255,255,0
		DrawRect trightx,trighty,100,50
		SetColor 255,255,255
		DrawText "Right",trightx+50,trighty+25,0.5,0.5
		SetColor 255,255,0
		DrawRect tupx,tupy,100,50
		SetColor 255,255,255
		DrawText "Up",tupx+50,tupy+25,0.5,0.5
		SetColor 255,255,0
		DrawRect tdownx,tdowny,100,50
		SetColor 255,255,255
		DrawText "Down",tdownx+50,tdowny+25,0.5,0.5


	End Method
    Method rectsoverlap:Bool(x1:Int, y1:Int, w1:Int, h1:Int, x2:Int, y2:Int, w2:Int, h2:Int)
        If x1 >= (x2 + w2) Or (x1 + w1) <= x2 Then Return False
        If y1 >= (y2 + h2) Or (y1 + h1) <= y2 Then Return False
        Return True
    End Method 

End Class

Class icons
	Method New()
	End Method
	Method draw(x:Float,y:Float,tp:String,thescale:Float,w:Float=32,h:Float=32,frame:Int=0)
		' Draw sword ////////////
		PushMatrix()
		Scale thescale,thescale
		Local basex:Float=x/thescale
		Local basey:Float=y/thescale
		Local pol:Float[6]
		Select tp
		Case "chest"
			pol = New Float[8]
			'basex+=w/2
			'basey+=h
			'w/=2
			'background
			SetColor 0,0,0
			DrawRect basex,basey,w,h
			'chest base
			pol[0]=basex+1
			pol[1]=basey+h/3
			pol[2]=basex+w
			pol[3]=basey+h/3
			pol[4]=basex+w-1
			pol[5]=basey+h
			pol[6]=basex+1
			pol[7]=basey+h-1
			SetColor 100,50,0
			DrawPoly(pol)
			'chest top
			pol[0]=basex+w/5
			pol[1]=basey+h/3
			pol[2]=basex+w-w/3
			pol[3]=basey
			pol[4]=(basex+w)-w/5
			pol[5]=basey+h/3
			pol[6]=basex+w-w/5
			pol[7]=basey+h/3
			SetColor 200,200,0
			DrawPoly(pol)
			SetColor 255,255,255
			DrawLine basex,basey,basex+w,basey
			SetColor 255,255,0
			DrawLine basex+w/4,basey,basex+w/4,basey+h
			DrawLine basex+w-w/4,basey,basex+w-w/4,basey+h			
		Case "slime"
			pol = New Float[20]
			'slime background
			basex+=w/2
			basey+=h
			w/=2
			Local cnt:Int=0
			Local an:Int=180
			Local w2:Float=w
			Local h2:Float=h/frame
			For Local i:Int=0 Until 10
				pol[cnt] = basex+(Cos(an)*w2)
				pol[cnt+1] = basey+(Sin(an)*h2)
				cnt+=2
				an+=180/9
			Next
			SetColor 0,100,0
			DrawPoly(pol)
			' slime foreground
			cnt=0
			an=180
			Local z:Float=0
			For Local i:Int=0 Until 10
				If an<300 And an>200 Then z=3 Else z=0 
				pol[cnt] = basex+z+(Cos(an)*w2)
				pol[cnt+1] = basey+z+(Sin(an)*h2)
				cnt+=2
				an+=180/9
			Next
			SetColor 0,200,0
			DrawPoly(pol)
			' slime highlight			
			pol = New Float[6]
			pol[0] = basex-w/4
			pol[1] = basey-h2/1.5
			pol[2] = basex
			pol[3] = basey-h2/1.5
			pol[4] = basex
			pol[5] = basey+h2/20
			SetColor 60,250,60
			DrawPoly(pol)
		Case "sword"
			'iron
			pol[0] = basex
			pol[1] = basey
			pol[2] = basex+5
			pol[3] = basey+10
			pol[4] = basex+10
			pol[5] = basey+10
			SetColor 200,100,100
			DrawPoly(pol)
			pol[0] = basex
			pol[1] = basey+5
			pol[2] = basex+25
			pol[3] = basey-10
			pol[4] = basex+5
			pol[5] = basey+10
			SetColor 100,100,100
			DrawPoly(pol)
			'handle
			pol[0] = basex+5
			pol[1] = basey+5
			pol[2] = basex-5
			pol[3] = basey+10
			pol[4] = basex
			pol[5] = basey+15
			SetColor 200,105,0
			DrawPoly(pol)
		Case "axe"
			' Axe ////////////////
			' iron
			pol[0] = basex
			pol[1] = basey
			pol[2] = basex+15
			pol[3] = basey
			pol[4] = basex
			pol[5] = basey+12
			SetColor 100,100,100
			DrawPoly(pol)
			' shaft
			pol[0] = basex + 8
			pol[1] = basey - 5
			pol[2] = basex - 20
			pol[3] = basey + 20
			pol[4] = basex - 1
			pol[5] = basey + 7
			SetColor 200,105,0
			DrawPoly(pol)
		Case "healthsmall"
			' healthsmall ///////////////
			'bottole
			basey+=7
			pol[0] = basex
			pol[1] = basey - 10
			pol[2] = basex - 5
			pol[3] = basey
			pol[4] = basex
			pol[5] = basey +10
			SetColor 200,0,0
			DrawPoly(pol)
			pol[0] = basex
			pol[1] = basey - 10
			pol[2] = basex + 5
			pol[3] = basey
			pol[4] = basex
			pol[5] = basey + 10
			SetColor 200,0,0
			DrawPoly(pol)
			' bottle bottom
			pol[0] = basex - 5
			pol[1] = basey + 10
			pol[2] = basex + 5
			pol[3] = basey + 10
			pol[4] = basex 
			pol[5] = basey 
			SetColor 100,0,0
			DrawPoly(pol)
			'bottle top
			pol[0] = basex - 5
			pol[1] = basey 
			pol[2] = basex + 5
			pol[3] = basey 
			pol[4] = basex 
			pol[5] = basey - 15
			SetColor 255,50,0
			DrawPoly(pol)
		Case "healthmedium"		 
			' healthbig
			'bottle center
			basey+=7
			pol = New Float[8]
			pol[0] = basex
			pol[1] = basey-10
			pol[2] = basex-10
			pol[3] = basey
			pol[4] = basex
			pol[5] = basey+10
			pol[6] = basex+10
			pol[7] = basey
			SetColor 255,0,0
			DrawPoly(pol)
			' top
			pol = New Float[6]
			pol[0] = basex-5
			pol[1] = basey-10
			pol[2] = basex
			pol[3] = basey
			pol[4] = basex+5
			pol[5] = basey-10
			SetColor 255,50,0
			DrawPoly(pol)						
		End Select
		Scale 1,1
		PopMatrix()
	End Method
End Class

Class shop
	Field width:Int,height:Int 'screenwidth and height
	Field state:String="main window"
	Field s_item:Stack<Int>
	Field s_item_level:Stack<Int>
	Field s_item_price:Stack<Int>
	Field issword:Int=4
	Field isaxe:Int=5
	Field ishealthsmall:Int=1
	Field ishealthmedium:Int=2
	Method New()
		width = 640
		height = 480
		resetshopinventory()
	End Method
	Method update()
	End Method
	Method draw()
		Select state
			Case "main window"
			drawmainwindow()
		End Select
	End Method
	Method drawmainwindow()
		' line in the center
		SetColor 255,255,255
		DrawLine width/2,0,width/2,height
		' left side buy
		SetColor 255,255,255
		DrawText "Buy",width/2-width/4,30
		' draw buy sword						
		Local sword_x:Int=48
		Local sword_y:Int=100
		For Local i:Int=0 Until s_item.Length
			If s_item.Get(i) = issword Then
				SetColor 255,255,255
				DrawText "lvl:"+s_item_level.Get(i),sword_x-10,sword_y-20
				DrawText "$"+s_item_price.Get(i),sword_x,sword_y+20
				myicons.draw(sword_x,sword_y,"sword",1.3)
				sword_x += 54
			End If
		Next
		' draw buy axe						
		Local axe_x:Int=48
		Local axe_y:Int=160
		For Local i:Int=0 Until s_item.Length
			If s_item.Get(i) = isaxe Then
				SetColor 255,255,255
				DrawText "lvl:"+s_item_level.Get(i),axe_x-10,axe_y-20
				DrawText "$"+s_item_price.Get(i),axe_x,axe_y+20
				myicons.draw(axe_x,axe_y,"axe",1.3)
				axe_x += 54
			End If
		Next

		'draw buy healthsmall
		Local hs_x:Int=48
		Local hs_y:Int=230
		myicons.draw(hs_x,hs_y,"healthsmall",2)
		SetColor 255,255,255
		DrawText(itemname[ishealthsmall],hs_x+10,hs_y-7)
		DrawText(countitem(ishealthsmall),hs_x+10,hs_y-20)
		DrawText("$"+5,hs_x+10,hs_y+5)

		'draw buy healthmedium
		Local hm_x:Int=48
		Local hm_y:Int=320
		myicons.draw(hm_x,hm_y,"healthmedium",2)
		SetColor 255,255,255
		DrawText(itemname[ishealthmedium],hm_x+10,hm_y-7)
		DrawText(countitem(ishealthmedium),hm_x+10,hm_y-20)
		DrawText("$"+5,hm_x+10,hm_y+5)




'		myicons.draw(200,100,"axe",2)
'		myicons.draw(100,200,"healthsmall",2)
'		myicons.draw(200,200,"healthmedium",2)
		
		SetColor 255,255,255
		DrawRect width/2-100,height-50,80,40
	End Method
	Method countitem:Int(item:Int)
		Local out:Int=0
		For Local i:=Eachin s_item
			If i = item Then out+=1
		Next
		Return out
	End Method
	Method resetshopinventory()
		s_item = New Stack<Int>
		s_item_level = New Stack<Int>
		s_item_price = New Stack<Int>
		' add healthsmall
		For Local i:Int=0 Until Rnd(1,5)
			s_item.Push(1)
			s_item_price.Push(5)
			s_item_level.Push(0)
		Next
		' Add healthmedium
		For Local i:Int=0 Until Rnd(1,5)
			s_item.Push(2)
			s_item_price.Push(15)
			s_item_level.Push(0)
		Next
		' Add Sword
		For Local i:Int=0 Until Rnd(1,5)
			s_item.Push(4)
			Local lvl:Int=Rnd(1,100)
			s_item_level.Push(lvl)
			s_item_price.Push(lvl*15)
		Next
		' Add Axe
		For Local i:Int=0 Until Rnd(1,5)
			s_item.Push(5)
			Local lvl:Int=Rnd(1,100)
			s_item_level.Push(lvl)
			s_item_price.Push(lvl*15)
		Next

	End Method
End Class

Class hud
	Field x:Int,y:Int
	Method New()
		y = sh-40
	End Method
	Method draw()
		mydrawtext(sw/3,y,100,20,"Gold : "+myplayer.gold)
		mydrawtext(sw/3,y+20,100,20,"Hp : "+myplayer.hp)
		myicons.draw(sw/3+((sw/6)),y,"healthsmall",.7)
		mydrawtext(sw/3+((sw/6)),y,100,20,"Health S : "+myplayer.healthsmall)
		myicons.draw(sw/3+((sw/6)),y+20,"healthmedium",.7)
		mydrawtext(sw/3+((sw/6)),y+20,100,20,"Health M : "+myplayer.healthmedium)		
		Local hasaxe:String="No"
		If myplayer.axe > 0 Then hasaxe = "Yes"
		myicons.draw(sw/3+((sw/6)*2),y,"axe",.7)
		mydrawtext(sw/3+((sw/6)*2),y,100,20,"Axe : "+hasaxe)
		Local hassword:String="No"
		If myplayer.sword > 0 Then hassword = "Yes"
		myicons.draw(sw/3+((sw/6)*2),y+20,"sword",.7)
		mydrawtext(sw/3+((sw/6)*2),y+20,100,20,"Sword : "+hassword)
		mydrawtext(sw/3+((sw/6)*3),y,100,20,"Att : "+myplayer.att)
		mydrawtext(sw/3+((sw/6)*3),y+20,100,20,"Def : "+myplayer.def)
	End Method
	Method mydrawtext(x:Int,y:Int,w:Int,h:Int,txt:String)
		Local shakex:Int=mymap.shakex
		Local shakey:Int=mymap.shakey
		SetColor 0,0,0
		DrawRect(x+shakex,y+shakey,w,h)
		SetColor 255,255,255
		DrawText(txt,x+shakex+5,y+shakey+2)
	End Method
End Class

Class gamemessage
	Field message:String
	Field y:Float,x:Int
	Field my:Float=20
	Field time:Int
	Field deleteme:Bool=False
	Method New(message:String)
		Self.message = message
		time=150
		y=sh+50
	End Method
	Method update()
		time-=1
		If y>0 Then 
			y-=my 
			my-=.34
			If my<=0 Then my=1
			Else 
			y=0
		End If		
		If time<=0 Then deleteme = True
	End Method
	Method draw()
		PushMatrix()
		SetAlpha 1
		Scale 2,2
		SetColor 0,0,0
		DrawRect 0,y/2,sw/2,20/2
		SetColor 255,255,255
		DrawText message,(sw/4)-(TextWidth(message)/2),(y+2)/2
		PopMatrix()
	End Method
End Class

Class dialog
	Field active:Bool=False
	Field message:String
	Field scrollpos:Int=0
	Field keydelay:Int=0
	Method New()
	End Method
	Method initdialog(dial:String)
		scrollpos = 0
		active=True

		If dial="welcome"
			message="You appear to be somehow lost in this place.|"
			message+="Maybe you should investigate..||"						
		End If
		If dial="firstlevelcleared"
			message="You seem to have been able to clear the previous place.|"
			message+="But you are in a new place now..|"
			message+="You need to find a way out.||"			
		End If
		If dial="firstitemfound"
			message="There is loot to be found here. Treasures, weapons|"
			message+="items that heal you. There are also monsters|"
			message+="around that want to hurt me..||"
		End If
		message+="Press 'z' or mouse."
	End Method
	Method update()
		If active = False Then Return
		If scrollpos<message.Length Then scrollpos += 1
		If keydelay>0 Then keydelay-=1
		If keydelay>0 Then Return
		' Show complete message or Close dialog
		If MouseDown(MOUSE_LEFT) Or KeyDown(KEY_Z) Then
			If scrollpos<message.Length Then 
				scrollpos = message.Length
				keydelay = 20
				Return
			End If
			active = False
		End If
	End Method
	Method draw()
		If active = False Then Return
		Local x:Int=100
		Local y:Int=300
		Local w:Int=640-200
		Local h:Int=150
		SetColor 255,255,255
		DrawRect x,y,w,h
		SetColor 0,0,0
		DrawRect x+1,y+1,w-2,h-2
		SetColor 255,255,255
		Local char:Int[]
		char = message.ToChars()
		Local nl:Int=0
		Local line:String[] = New String[15]
		Local cl:Int=0
		For Local i:Int=0 Until message.Length		
			If String.FromChar(char[i]) = "|" Then 
				cl+=1
			Else
				line[cl]+=String.FromChar(char[i])
			End If
			If i=scrollpos Or cl>10
				Exit
			End If
		Next
		For Local i:Int=0 Until 15
			DrawText line[i],x+10,y+10+nl
			nl+=15
		Next
	End Method
End Class

Class effect
	Field rectoutactive:Bool=False
	Field x1:Float[],y1:Float[]
	Field x2:Float[],y2:Float[]
	Field rox:Int,roy:Int
	Field recttime:Int
	Method newrectout(x:Int,y:Int)
		recttime = 60
		rectoutactive = True
		rox = x
		roy = y
		x1 = New Float[10]
		y1 = New Float[10]
		x2 = New Float[10]
		y2 = New Float[10]
	End Method
	Method update()
		If rectoutactive Then updaterectout()
	End Method
	Method updaterectout()		
		For Local i:Int=0 Until 10
			x1[i]-=((i*2)+12)
			y1[i]-=((i*2)+12)
			x2[i]+=((i*2)+12)
			y2[i]+=((i*2)+12)
		Next
		recttime -= 1
		If recttime <=0 Then rectoutactive = False
	End Method
	Method draw()
		If rectoutactive Then drawrectout()
	End Method
	Method drawrectout()
		SetColor 255,255,255
		For Local i:Int=0 Until 10
			Local ltx:Int=x1[i]
			Local lty:Int=y1[i]
			Local rtx:Int=x2[i]
			Local rty:Int=y1[i]
			DrawLine ltx+rox+mymap.shakex,lty+roy+mymap.shakey,rtx+rox+mymap.shakex,rty+roy+mymap.shakey
			Local lbx:Int=x1[i]
			Local lby:Int=y2[i]
			DrawLine ltx+rox+mymap.shakex,lty+roy+mymap.shakey,lbx+rox+mymap.shakex,lby+roy+mymap.shakey
			Local rbx:Int=x2[i]
			Local rby:Int=y2[i]
			DrawLine lbx+rox+mymap.shakex,lby+roy+mymap.shakey,rbx+rox+mymap.shakex,rby+roy+mymap.shakey
			DrawLine rbx+rox+mymap.shakex,rby+roy+mymap.shakey,rtx+rox+mymap.shakex,rty+roy+mymap.shakey
		Next
	End Method
End Class



Class item
	Field x:Int,y:Int
	Field kind:String
	Field remove:Bool
	Method New(x:Int,y:Int,kind:String)
		Self.x = x
		Self.y = y
		Self.kind = kind
	End Method
	Method draw(x:Int,y:Int)
		Select kind
			Case "chest"
				SetColor 255,255,255
				DrawRect(x*tw+mymap.shakex,y*th+mymap.shakey,tw,th)
				myicons.draw(x*tw+mymap.shakex,y*th+mymap.shakey,"chest",1,tw,th,0)
			Default
				tempdraw(x,y)
		End Select
	End Method
	Method tempdraw(x:Int,y:Int)
		SetColor 255,255,0
		DrawRect(x*tw+mymap.shakex,y*th+mymap.shakey,tw,th)
	End Method
End Class

Class monster
	Field px:Int,py:Int
	Field kind:String
	Field isbat:Int=1,israt:Int=2,isgoblin:Int=3
	Field hp:Int
	Field hpmax:Int
	Field state:String="roam"
	Field movedelay:Int=60
	Field movespeed:Int=1
	Field remove:Bool=False
	Field frame:Int=Rnd(1,5)
	Field framedir:Int=1
	Field framemax:Int=5
	Field framedelay:Int=0
	Field framedelaymax:Int=15
	Method New(x:Int,y:Int,kind:String)
		px = x
		py = y
		hp = Rnd(1,5)
		hpmax = Rnd(hp,12)
		Self.kind = kind
	End Method
	Method update()
		framedelay+=1
		If framedelay=framedelaymax
			framedelay=0
			frame+=framedir
			If frame>=framemax Then framedir = -1
			If frame<=1 Then framedir=1
		End If
		movedelay -= movespeed
		If movedelay>0 Then Return
		movedelay = 60
		If state = "roam"
			' roam 
			Local nx:Int=px
			Local ny:Int=py
			If Rnd(1)<.5 Then 
				nx += Rnd(-1,2)
			Else
				ny += Rnd(-1,2)
			End If
			If mymap.map[nx][ny] = 1 And mymap.itemmap[nx][ny] = Null Then
				Local ontop:Bool=False
				For Local i:=Eachin mymap.mymonster
					If i.px = nx And i.py = ny Then 
						ontop = True
						Exit
					Endif
				Next
				If ontop = False
				If myplayer.x = nx And myplayer.y = ny Then
				Else
					px = nx
					py = ny
				End If
				End If
			End If 
		End If
	End Method
	Method draw()
		If mymap.fogmap[px][py] = False Then Return
		Select kind
			Default
				tempdraw()
		End Select
	End Method
	Method tempdraw()
		SetColor 255,0,0
		'DrawRect px*tw+mymap.shakex,py*th+mymap.shakey,tw,th
		myicons.draw(px*tw+mymap.shakex,py*th+mymap.shakey,"slime",1,tw,th,frame)
		drawhealth()
	End Method
	' draw the health above the monsters
	Method drawhealth()
		Local cw:Float = (Float(tw) / Float(hpmax)) * Float(hp)
		SetColor 255,255,255
		DrawRect px*tw+mymap.shakex,py*th+mymap.shakey,tw,1
		If cw > tw / 2 Then SetColor 0,255,0
		If cw < tw / 2 Then SetColor 200,200,0
		If cw < tw / 3 Then SetColor 244,0,0
		DrawRect px*tw+mymap.shakex,py*th+mymap.shakey+1,cw,2
		SetColor 0,0,0
		DrawRect px*tw+mymap.shakex,py*th+mymap.shakey+3,tw,1		
	End Method
End Class

Class player
	Field x:Int,y:Int,controldelay:Int
	Field tleft:Bool,tright:Bool,tup:Bool,tdown:Bool
	Field tleftx:Int=20
	Field tlefty:Int=sh-100
	Field trightx:Int=120
	Field trighty:Int=sh-100
	Field tupx:Int=70
	Field tupy:Int=sh-150
	Field tdownx:Int=70
	Field tdowny:Int=sh-50
	Field hpmax:Int
	Field gold:Int,healthsmall:Int
	Field healthmedium:Int
	Field axe:Int,axelevel:Int
	Field sword:Int,swordlevel:Int
	Field hp:Int
	Field def:Int
	Field att:Int
	Method New()
		x = mymap.mypoint.Get(1).x
		y = mymap.mypoint.Get(1).y
		playerfog(x,y,6)
		hp = 10
		def = 5
		att = 2
	End Method
	Method updateworld()
	
	End Method
	Method update()
		controldelay+=1
		If controldelay<10 Then Return
		'touch mouse input
		If MouseDown(MOUSE_LEFT) Or TouchDown
			Local x:Int
			Local y:Int
			Local w:Int=100
			Local h:Int=50
			x = tupx
			y = tupy
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tup=True
			x = tdownx
			y = tdowny
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tdown=True
			x = tleftx
			y = tlefty
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tleft=True
			x = trightx
			y = trighty
			If rectsoverlap(x,y,w,h,MouseX(),MouseY(),1,1) Then tright=True
		End If

		Local ox:Int=x,oy:Int=y

		'keyinput
		If KeyDown(KEY_UP) Or tup
			If y-1 >= 0 
				If mymap.map[x][y-1] = 1 Then y-=1
				controldelay = 0
				playerfog(x,y,6)
			End If
		End If
		If KeyDown(KEY_DOWN) Or tdown
			If y+1 < mymap.mh
				If mymap.map[x][y+1] = 1 Then y+=1
				controldelay = 0
				playerfog(x,y,6)
			End If
		End If
		If KeyDown(KEY_RIGHT) Or tright
			If x+1 < mymap.mw
				If mymap.map[x+1][y] = 1 Then x+=1
				controldelay = 0
				playerfog(x,y,6)
			End If
		End If
		If KeyDown(KEY_LEFT) Or tleft
			If x-1 >=0 
				If mymap.map[x-1][y] = 1 Then x-=1
				controldelay = 0
				playerfog(x,y,6)
			End If
		End If
		
		
		'player monster fighting
		For Local i:=Eachin mymap.mymonster
			If i.px = x And i.py = y
				i.hp -= att
				mymap.shaketheroom()
				If i.hp <=0 Then  'if monster dies then
					i.remove = True
				Else 'monster did not die so do not stand on his pos
					x = ox
					y = oy
				End If
			End If
		Next
		'remove dead monsters
		For Local i:=Eachin mymap.mymonster
			If i.remove = True Then mymap.mymonster.Remove(i)
		Next

		' Player stands on item
		If mymap.itemmap[x][y] <> Null
			myeffect.newrectout(x*tw,y*th)
			mygamemessage.AddLast(mymap.itemmap[x][y].kind)
			If mymap.itemmap[x][y].kind = "gold" Then myplayer.gold+=20
			' If we find an axe then handle that part
			If mymap.itemmap[x][y].kind = "axe" 
				Local finished:Bool=False
				If myplayer.axe = 0 
					myplayer.axe = 1 
					myplayer.att += 2
					myplayer.axelevel = 1					
					finished = True
				End If
				' If we have a new higher level axe
				If finished = False And myplayer.axe > 0 Then
					Local newlevel:Int=Rnd(1,5)
					If myplayer.axelevel < newlevel
						mygamemessage.AddLast("Level "+newlevel+" axe.")						
						myplayer.att -= myplayer.axelevel * 2
						myplayer.axelevel = newlevel
						myplayer.att += newlevel * 2
					End If
				End If

			End If
			' If we find a sword then handle that part.
			If mymap.itemmap[x][y].kind = "sword" 
				Local finished:Bool=False
				' If we had no sword yet
				If myplayer.sword = 0 Then 
					myplayer.sword = 1 
					myplayer.swordlevel = 1
					myplayer.att += 2
					finished = True
				End If
				' If we have a new higher level sword
				If finished = False And myplayer.sword > 0 Then
					Local newlevel:Int = Rnd(1,5)
					If myplayer.swordlevel < newlevel
						mygamemessage.AddLast("Level "+newlevel+" sword.")
						myplayer.att -= myplayer.swordlevel * 2
						myplayer.swordlevel = newlevel
						myplayer.att += newlevel * 2
					End If
				End If
			End If
			If mymap.itemmap[x][y].kind = "healthsmall" Then myplayer.healthsmall += 1
			If mymap.itemmap[x][y].kind = "healthmedium" Then myplayer.healthmedium += 1
			If mymap.itemmap[x][y].kind = "chest"
				mymap.itemmap[x][y].kind = "gold"
				x = ox
				y = oy
			Else
				mymap.itemmap[x][y] = Null
			End If
			If firstitemfound = False
				mydialog.initdialog("firstitemfound")
				firstitemfound = True
			Endif
		End If


		
		tup=False
		tright=False
		tdown=False
		tleft=False
	End Method
	Method draw()
		SetColor 255,255,255
		DrawRect x*tw+mymap.shakex,y*th+mymap.shakey,tw,th
		SetColor 255,255,0
		DrawRect tleftx,tlefty,100,50
		SetColor 255,255,255
		DrawText "Left",tleftx+50,tlefty+25,0.5,0.5
		SetColor 255,255,0
		DrawRect trightx,trighty,100,50
		SetColor 255,255,255
		DrawText "Right",trightx+50,trighty+25,0.5,0.5
		SetColor 255,255,0
		DrawRect tupx,tupy,100,50
		SetColor 255,255,255
		DrawText "Up",tupx+50,tupy+25,0.5,0.5
		SetColor 255,255,0
		DrawRect tdownx,tdowny,100,50
		SetColor 255,255,255
		DrawText "Down",tdownx+50,tdowny+25,0.5,0.5

	End Method
    Method playerfog(x1,y1,radius:Float)
        For Local y2=-radius To radius
        For Local x2=-radius To radius
            If (y2*y2+x2*x2) <= radius*radius+radius*0.8
                Local x3 = x2+x1
                Local y3 = y2+y1
                If x3>=0 And x3<mymap.mw And y3>=0 And y3<mymap.mh
					mymap.fogmap[x3][y3] = True
				End If
            End If
        Next
        Next    
    End Method
    Method rectsoverlap:Bool(x1:Int, y1:Int, w1:Int, h1:Int, x2:Int, y2:Int, w2:Int, h2:Int)
        If x1 >= (x2 + w2) Or (x1 + w1) <= x2 Then Return False
        If y1 >= (y2 + h2) Or (y1 + h1) <= y2 Then Return False
        Return True
    End Method 
End Class

Class map
	Field mw:Int,mh:Int,sw:Int,sh:Int
	Field mypoint:Stack<point> = New Stack<point>
	Field myline:Stack<line> = New Stack<line>
	Field map:Int[][]
	Field fogmap:Bool[][]
	Field itemmap:item[][]
	Field mymonster:List<monster> = New List<monster>
	Field shaking:Bool=False
	Field shakex:Int,shakey:Int
	Field shakevalue:Int
	Method New(sw:Int,sh:Int,mw:Int,mh:Int)
		Self.sw = sw
		Self.sh = sh
		Self.mw = mw
		Self.mh = mh
		tw = Float(sw)/Float(mw)
		th = Float(sh)/Float(mh)
		map = New Int[mw][]
		fogmap = New Bool[mw][]
		itemmap = New item[mw][]
		For Local i=0 Until mw
			map[i] = New Int[mh]
			fogmap[i] = New Bool[mh]
			itemmap[i] = New item[mh]
		Next
		For Local i=0 Until mw*mh/200
			Local x:Int=Rnd(5,mw-5)
			Local y:Int=Rnd(5,mh-9)
			If rectsoverlap(x*tw,y*th,1,1,0,sh-240,320,240) = False
			mypoint.Push(New point(i,x,y))
			End If
		Next
		
		makemap()
		placeitems()
		placemonsters()
	End Method
	Method update()
		If shaking = True And Rnd()<.99
			shakex = Rnd(-shakevalue,shakevalue)
			shakey = Rnd(-shakevalue,shakevalue)			
			shakevalue -= 1
			If shakevalue <= 0 
				shaking = False
				shakex = 0
				shakey = 0
			End If
		End If
	End Method
	Method monsterupdate()
		For Local i:=Eachin mymonster
			i.update()
		Next
	End Method
	Method placemonsters()
		For Local i:Int=0 Until 10
			Local placed:Bool=False
			While Not placed
				Local x:Int=Rnd(mw)
				Local y:Int=Rnd(mh)
				If map[x][y] = 1
				If itemmap[x][y] <> Null
					Local newmonster:String=monstername[Rnd(monstername.Length)]
					mymonster.AddLast(New monster(x,y,newmonster))
					placed = True
				End If
				End If
			Wend
		Next
	End Method
	Method placeitems()
		For Local i:Int=0 Until 10
			Local placed:Bool=False
			While placed = False
				Local x:Int=Rnd(mw)
				Local y:Int=Rnd(mh)
				If map[x][y] = 1
				If itemmap[x][y] = Null					
					Local newitem:String=itemname[Rnd(itemname.Length)]
					itemmap[x][y] = New item(x,y,newitem)
					placed = True
				End If
				Endif
			Wend
		Next
	End Method
	Method makemap()
		' connect point to closest point with unique id
		'get first point
		Local x:Int=mypoint.Get(0).x
		Local y:Int=mypoint.Get(0).y
		Local id:Int=mypoint.Get(0).id 
		Local closestindex:Int=0
		While closestindex<>-1
			'find closest
			Local dist:Int=10000		
			closestindex=-1		
			For Local ii=0 Until mypoint.Length
				If mypoint.Get(ii).id <> id
				Local d:Int=distance(x,y,mypoint.Get(ii).x,mypoint.Get(ii).y) 
				If d<dist Then			
					dist=d
					closestindex = ii
				End If
				End If
			Next
			If closestindex>-1
				mypoint.Get(closestindex).id = id
				myline.Push(New line(x,y,mypoint.Get(closestindex).x,mypoint.Get(closestindex).y))
				x = mypoint.Get(closestindex).x
				y = mypoint.Get(closestindex).y
			End If
		Wend
		'make the map
		For Local i:=Eachin myline
			Local x1:Int=i.x1
			Local y1:Int=i.y1
			Local x2:Int=i.x2
			Local y2:Int=i.y2
			Local exitloop:Bool=False
			While exitloop=False
				If x1<x2 Then x1+=1
				If x1>x2 Then x1-=1
				If y1<y2 Then y1+=1
				If y1>y2 Then y1-=1
				If x1=x2 And y1=y2 Then exitloop=True
				' create the tunnel size
				Local s:Int=Rnd(2,3)
				' sometimes make a wider tunnel
				If Rnd(mw*mh)< (mw*mh/7) Then s=Rnd(s,s*3)
				putmap(x1,y1,s)
			Wend
		Next
		' make the special tiles
		'ground tiles
		For Local y:Int=1 Until mh - 1
		For Local x:Int=1 Until mw - 1
			If map[x][y] = 1
			If map[x+1][y] = 0 Then map[x][y] = 4 ; Continue
			If map[x-1][y] = 0 Then map[x][y] = 4 ; Continue
			If map[x][y-1] = 0 Then map[x][y] =4 ; Continue
			If map[x][y+1] = 0 Then map[x][y] = 4 ; Continue
			End If
		Next
		Next
		'bottom tiles
		For Local y:Int=1 Until mh - 1
		For Local x:Int=1 Until mw - 1
			If map[x][y] = 4 
			If map[x][y-1] = 1
				map[x][y] = 2
			End If
			End If
		Next
		Next		
		' wall tiles at the top
		For Local y:Int=0 Until mh - 2
		For Local x:Int=0 Until mw
			If map[x][y] = 4
			If map[x][y+1] = 1
				map[x][y+1] = 3
			End If
			End If
		Next
		Next

	End Method
	Method putmap(x:Int,y:Int,s:Int)
		For Local y3=-s To s
		For Local x3=-s To s
			Local x4:Int=x+x3
			Local y4:Int=y+y3
			If x4>=0 And x4<mw And y4>=0 And y4<mh
			map[x4][y4] = 1
			End If
		Next
		Next	
	End Method
	
	Method shaketheroom()
		shaking=True
		shakevalue = 12
	End Method
	
	Method draw()
		' Draw the map
		For Local y=0 Until mh
		For Local x=0 Until mw
			If map[x][y] > 0 And fogmap[x][y] = True
				If map[x][y] = 4 'walls
				SetColor 155,50,0
				DrawRect x*tw+shakex,y*th+shakey,tw+1,th+1
				End If

				If map[x][y] = 1 'ground tile
				Local sw:Bool=True
				For Local y1:Int=0 Until th+1 Step 5
				For Local x1:Int=0 Until tw+1 Step 5
					Local n:Int=0					
					If sw = True Then n=50
					SetColor 125+n,30+n,n
					If sw Then DrawRect x*tw+x1+shakex,y*th+y1+shakey,3,3
					If sw = True Then sw = False Else sw = True
				Next
				Next
				End If
				If map[x][y] = 2 ' wall tile with highlight
				SetColor 155,50,0
				DrawRect x*tw+shakex,y*th+shakey,tw+1,th+1
				SetColor 0,0,0
				DrawRect x*tw+shakex,y*th+shakey,tw+1,3
				SetColor 200,60,0
				DrawRect x*tw+shakex,y*th+shakey,tw+1,2			
				End If
				If map[x][y] = 3 'tile at top wall below it
				SetColor 195,90,19
				For Local y1:Int=0 Until th+1 Step 3
				For Local x1:Int=0 Until tw+1 Step 3
					DrawRect x*tw+x1+shakex,y*th+y1+shakey,2,2
				Next
				Next
				End If

			End If
		Next
		Next
		' Draw the items
		For Local y=0 Until mh
		For Local x=0 Until mw
			If itemmap[x][y] <> Null And fogmap[x][y] = True
				'DrawRect x*tw,y*th,tw+1,th+1
				itemmap[x][y].draw(x,y)
			End If
		Next
		Next
		'Draw the monsters
		For Local i:=Eachin mymonster
			i.draw()
		Next		
	End Method
    Method distance:Int(x1:Int,y1:Int,x2:Int,y2:Int)
        Return Abs(x2-x1)+Abs(y2-y1)
    End Method	
    Method rectsoverlap:Bool(x1:Int, y1:Int, w1:Int, h1:Int, x2:Int, y2:Int, w2:Int, h2:Int)
        If x1 >= (x2 + w2) Or (x1 + w1) <= x2 Then Return False
        If y1 >= (y2 + h2) Or (y1 + h1) <= y2 Then Return False
        Return True
    End Method 
End Class

Class point
	Field id:Int
	Field x:Int,y:Int
	Method New(id:Int,x:Int,y:Int)
		Self.id = id
		Self.x = x
		Self.y = y
	End Method
End Class
Class line
	Field x1:Int,y1:Int
	Field x2:Int,y2:Int
	Method New(x1:Int,y1:Int,x2:Int,y2:Int)
		Self.x1 = x1
		Self.y1 = y1
		Self.x2 = x2
		Self.y2 = y2
	End Method
End Class

Global myworldmap:worldmap
Global mymap:map
Global myplayer:player
Global myeffect:effect = New effect
Global mydialog:dialog = New dialog
Global mygamemessage:List<gamemessage> = New List<gamemessage>
Global myhud:hud
Global myshop:shop
Global myicons:icons

Class MyGame Extends App
	Field screen:String="dungeon"
	Field firstlevelcleared:Bool=False
	Field mapexplored:Bool=False
	Field w:Int=mapwidth,h:Int=mapheight
    Method OnCreate()
    	For Local i:Int=0 Until 1000
    		Seed = Millisecs()
    	Next
        SetUpdateRate(60)
		
		Local s:Int=30'Rnd(30,100)
		Local plumps:Float        
   	  	If s<40 Then plumps = s/1.5 Else plumps = s*2
    	myworldmap = New worldmap(DeviceWidth,DeviceHeight,s,s,plumps)        
        
        mymap = New map(640,480,w,h)
        myicons = New icons()
        myplayer = New player()
        myhud = New hud()
        myshop = New shop()
        mydialog.initdialog("welcome")
        mygamemessage.AddLast("welcome")
    End Method
    Method OnUpdate()  

       	If screen = "world"
       		myworldmap.update()
       	End If
          
		If screen = "shop"
			myshop.update()
		End If

    	If screen = "dungeon"
		    If KeyDown(KEY_S)
		    	mymap.shaketheroom()
		    	myeffect.newrectout(320,240)
		    End If
	    	If KeyDown(KEY_SPACE) Or mapexplored = True Then 
	    		If firstlevelcleared = False Then
	    			firstlevelcleared = True
	    			mydialog.initdialog("firstlevelcleared")
	    		End If
	    		mapexplored = False
				Seed = Millisecs()
				w+=2
				h+=2
				If w>300 Then w = 50 ; h = 50
				mymap = New map(640,480,w,h)
				'myplayer = New player()
				myplayer.x = mymap.mypoint.Get(1).x
				myplayer.y = mymap.mypoint.Get(1).y
				myplayer.playerfog(myplayer.x,myplayer.y,6)
	
	    	End If
			If mydialog.active = False
	    	myplayer.update
	    	mymap.monsterupdate()
	    	mymap.update()
	    	myeffect.update()
	    	End If
	    	mydialog.update()
	    	For Local i:=Eachin mygamemessage
	    		i.update()
	    	Next
	    	For Local i:=Eachin mygamemessage
	    		If i.deleteme = True Then mygamemessage.Remove(i)
			Next    	
	    	If Rnd()<.01 And ismapexplored() Then mapexplored=True
    	End If
    End Method
    Method OnRender()
        Cls 0,0,0
       	
       	If screen = "world"
			myworldmap.draw()
			myworldmap.drawplayer()
       	End If 
        
        If screen = "gfx"
        	myicons.draw(50,50,"chest",1,32,32,1)
        	myicons.draw(200,100,"slime",1,32,32,2)
        	myicons.draw(300,100,"slime",1,32,32,3)
        	myicons.draw(400,100,"slime",1,32,32,4)

        End If
        If screen = "shop"
			myshop.draw()
        End If
       	If screen = "dungeon"
	        mymap.draw
	        myplayer.draw
	        myeffect.draw()
	        mydialog.draw()
	        myhud.draw()
	        For Local i:=Eachin mygamemessage
	        	i.draw()
	        Next
	        If KeyDown(KEY_SHIFT) = False Then Return
	        SetColor 255,255,255
	        Scale 1,1
	        SetAlpha 0.5
	        DrawText "RogueLike random maps and fog of war and player. space/mouse new map, cursors move.",0,0
	        DrawText "If everything is explored a new map is created.",0,15
        End If
    End Method
End Class

Function ismapexplored:Bool()
	Local ex:Bool=True
	' is the entire map explored?
	For Local y=0 Until mymap.mh
	For Local x=0 Until mymap.mw
		If mymap.map[x][y] = 1 And mymap.fogmap[x][y] = False Then ex=False
	Next
	Next
	' are the monsters left alive?
	For Local i:=Eachin mymap.mymonster	
		ex = False
	Next
	Return ex
End Function

Function Main()
    New MyGame()
End Function
